git config --global user.name "User Namovich"  # изменение ника
git config --global user.email username@yandex.ru # здесь нужно указать свой настоящий email 
git config --global --list - глобальный список атрибутов гитконфиг
git config --list - локальный список атрибутов гитконфиг


git status - текущее состояние репозитория
git status --ignored - текущее состояние репозитория, включая игнорируемые файлы
git log - история комитов
git log --oneline - получить логи в одну строчку
git ls-tree -r master --name-only - какие файлы сейчас отслеживаются


# create new ветка
git branch - список всех веток в репозитории локальном
git branch {name_ветка} - создать новую ветку
git branch -D <название_ветки> - удалить ветку небезопасно
git branch -d <название_ветки> - удалить ветку безопасно(В случае, если ветка не слиялась с основной будет ошибка)
git checkout {name_ветка} - переключиться на новую ветку
git checkout -b {name_ветка} - создаёт новую ветку и сразу переключается на неё
ПРимер названия ветки: feature or bugfix/name_ветка, пример: bugfix/current-branch, feature/add-branch-info

# Слияние
git merge {название ветки, которую копирую} - слияние ветки в которой находишься с веткой, которая указана
Для выхода нажмите Esc, введите сочетание :qa! и нажмите Enter.
git merge --no-ff {название ветки, которую копирую} - в таком случае коммиты находятся на своих ветка, а не соединяются, только итог
Конфликты слияния легко решать через visual studio code


git add "{name_file}" - Добавляет файл для отслеживания
git add --all - Добавляет все файлы для отслеживания
git add . - Добавляет текущую директорию для отслеживания


git diff - сравнит последнюю закоммиченную версию файла с той, что находится в состоянии modified.
git diff --staged - покажет изменения в staged-файлах относительно последних закоммиченных версий.
git diff <коммит1> <коммит2> - сравнивается изменения в двух коммитах.
git diff name_branch1 name_branch2 - сравнивает состояния веток
git diff name_branch1~0 name_branch2~2 - сравнивает состояния веток рахных коммитов

git commit -m '{name_edit}' - создаёт новую запись
git commit --amend --no-edit - добавляет изменения в последний коммит(нужно для того, чтобы не создавать новый)
git commit --amend -m "Обновлённое сообщение коммита" - Изменить сообщение коммита

git restore --staged <file> - переведёт файл из staged обратно в modified или untracked.
git restore <file> - «откатит» изменения в файле до последней сохранённой (в коммите или в staging) версии.
git reset --hard <commit hash> -«откатит» историю до коммита с хешем <hash>. Более поздние коммиты потеряются!
Для удаления из отслеживаемых файлов надо:
1) git rm --cached <file> - удаляет из отслеживаемы, флаг -r - если надо всю папку прекратить отслеживать
2) git commit -m "коммит" - сохраняем изменения

# работает с github
git remote add origin git@github.com:%ИМЯ_АККАУНТА%/%Имя_РЕПОЗИТОРИЯ%.git  - связывает локальный и удалённый репозиторий
git remote -v - показывает, связан или нет (если 2 строчки, то связан)
git remote rm {name}(Обычно origin) - удаляет связь
git push --set-upstream {name_основной ветки} {name_ветка} - добавляет новую ветку
git push -u origin name_branch - первое подключение к github
git push --force - форсированный пуш(в случае не fast-forword слияния)
git push - Обновляет сохранения
git pull - подтянуть данные с удалённого репозитория

Для того, чтобы скопировать чей-то проект в свой github нужно нажать на кнопку fork
git clone url_rep - Клонирует репозиторий

HEAD - последний коммит


# Удаляет git репозиторий
rm -rf .git
-r - означает рекурсивный метод(то есть удалять и вложенные папки)
-f - означает force(то есть принудительно)



ssh-ключи 
ls -la ~/.ssh or ls -a ~/.ssh - проверяет наличие ssh ключей
ssh-keygen -t ed25519 -C "электронная почта, к которой привязан ваш аккаунт на GitHub" - создаёт ssh 
# скопировать содержимое ключа в буфер обмена:
$ pbcopy(Unix) clip(windows) < ~/.ssh/id_rsa.pub
# для ed25519:
$ pbcopy(Unix) clip(windows) < ~/.ssh/id_ed25519.pub
Вставить его в github 



Markdown
# H1 — заголовок первого уровня, самый большой
## H2 — заголовок второго уровня, поменьше
### H3
#### H4
##### H5
###### H6 — заголовок шестого уровня, самый маленький 
--- - черта
"  " - Два пробела продолжить строку на новой строчке(писать без ковычек)
<br> - начать с новой строки
*Текст* или _Текст_ - делает текст курсивом
**Полужирный текст** __ТЕкст__ - Полужирный текст
~~Зачёркнутый текст~~
1. Текст - нумерованный список
* Текст или - Текст - Ненумерованный список
[ТЕкст гиперссылки](гиперссылка) - гиперссылка
[ТЕкст гиперссылки](гиперссылка "Название сайта") - гиперссылка с подсказкой при наведение
```{Название языка программирования}
python main.py
``` - код



Некоторые примеры оформления .gitignore
# какой-то комментарий - комментарий
.название_файла.txt - игнорирование файла с таким названием по всему проекту, включая вложенные папки
* - игнорировать все файлы
*.jpeg - игнорировать любые картинки
docs/*/tmp - игнорировать любые подпапка docs не глубже одного
file?.txt - ? - любой один символ
file[1-9].txt - игнорирования одного символа в диапазоне
/totd.txt - игнорировать только в корне
dir/ - игнорирование папки
/**/ - игноририрование любого количества под папок
!doge.jpeg - ! восклицательный знак исключение для правила


